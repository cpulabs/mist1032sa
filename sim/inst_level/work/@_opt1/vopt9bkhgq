library verilog;
use verilog.vl_types.all;
entity exception_manager is
    port(
        iCLOCK          : in     vl_logic;
        inRESET         : in     vl_logic;
        iCOREINFO_COMMIT_COUNTER: in     vl_logic_vector(5 downto 0);
        iCOREINFO_EXCEPTION_PROTECT: in     vl_logic;
        iCOREINFO_CURRENT_PC: in     vl_logic_vector(31 downto 0);
        oCOREINFO_FREE_INST_DISCARD: out    vl_logic;
        oCOREINFO_FREE_EVENT: out    vl_logic;
        oCOREINFO_FREE_COMMIT_TAG: out    vl_logic_vector(5 downto 0);
        oCOREINFO_FREE_ADDR_SET: out    vl_logic;
        oCOREINFO_FREE_ADDR: out    vl_logic_vector(31 downto 0);
        oCOREINFO_FREE_RESTART: out    vl_logic;
        oCOREINFO_FREE_CURRENT_PC: out    vl_logic_vector(31 downto 0);
        oCOREINFO_FREE_SET_IRQ_MODE: out    vl_logic;
        oCOREINFO_FREE_CLR_IRQ_MODE: out    vl_logic;
        oCOREINFO_FREE_NEW_SPR_VALID: out    vl_logic;
        oCOREINFO_FREE_NEW_SPR: out    vl_logic_vector(31 downto 0);
        oCOREINFO_MCODE0_VALID: out    vl_logic;
        oCOREINFO_MCODE0: out    vl_logic_vector(31 downto 0);
        oCOREINFO_MCODE1_VALID: out    vl_logic;
        oCOREINFO_MCODE1: out    vl_logic_vector(31 downto 0);
        iCODEINFO_MCODE_LOCK: in     vl_logic;
        iCOREINFO_SYSREG_IDTR: in     vl_logic_vector(31 downto 0);
        iCOREINFO_SYSREG_TISR: in     vl_logic_vector(31 downto 0);
        iCOREINFO_SYSREG_TIDR: in     vl_logic_vector(31 downto 0);
        iCOREINFO_SYSREG_PSR: in     vl_logic_vector(31 downto 0);
        iCOREINFO_SYSREG_PPSR: in     vl_logic_vector(31 downto 0);
        iCOREINFO_SYSREG_PPCR: in     vl_logic_vector(31 downto 0);
        iCOREINFO_SYSREG_SPR: in     vl_logic_vector(31 downto 0);
        oLDST_USE       : out    vl_logic;
        oLDST_REQ       : out    vl_logic;
        iLDST_BUSY      : in     vl_logic;
        oLDST_ORDER     : out    vl_logic_vector(1 downto 0);
        oLDST_RW        : out    vl_logic;
        oLDST_TID       : out    vl_logic_vector(13 downto 0);
        oLDST_MMUMOD    : out    vl_logic_vector(1 downto 0);
        oLDST_PDT       : out    vl_logic_vector(31 downto 0);
        oLDST_ADDR      : out    vl_logic_vector(31 downto 0);
        oLDST_DATA      : out    vl_logic_vector(31 downto 0);
        iLDST_REQ       : in     vl_logic;
        iLDST_DATA      : in     vl_logic_vector(31 downto 0);
        oIO_IRQ_CONFIG_TABLE_REQ: out    vl_logic;
        oIO_IRQ_CONFIG_TABLE_ENTRY: out    vl_logic_vector(5 downto 0);
        oIO_IRQ_CONFIG_TABLE_FLAG_MASK: out    vl_logic;
        oIO_IRQ_CONFIG_TABLE_FLAG_VALID: out    vl_logic;
        oIO_IRQ_CONFIG_TABLE_FLAG_LEVEL: out    vl_logic_vector(1 downto 0);
        oICT_REQ        : out    vl_logic;
        oICT_ENTRY      : out    vl_logic_vector(5 downto 0);
        oICT_CONF_MASK  : out    vl_logic;
        oICT_CONF_VALID : out    vl_logic;
        oICT_CONF_LEVEL : out    vl_logic_vector(1 downto 0);
        iALU_BRANCH_REQ : in     vl_logic;
        iALU_BRANCH_ADDR: in     vl_logic_vector(31 downto 0);
        iALU_BRANCH_COMMIT_TAG: in     vl_logic_vector(5 downto 0);
        iALU_INTRET_REQ : in     vl_logic;
        iALU_INTRET_ADDR: in     vl_logic_vector(31 downto 0);
        iALU_INTRET_COMMIT_TAG: in     vl_logic_vector(5 downto 0);
        iIDT_SET_REQ    : in     vl_logic;
        iIDT_SET_R_ADDR : in     vl_logic_vector(31 downto 0);
        iIDT_SET_COMMIT_TAG: in     vl_logic_vector(5 downto 0);
        iIDT_SET_IDTR   : in     vl_logic_vector(31 downto 0);
        iHW_TS_REQ      : in     vl_logic;
        iHW_TS_ADDR     : in     vl_logic_vector(31 downto 0);
        oHW_TS_BUSY     : out    vl_logic;
        iIRQ_REQ        : in     vl_logic;
        iIRQ_NUM        : in     vl_logic_vector(6 downto 0);
        oIRQ_ACK        : out    vl_logic;
        oIRQ_BUSY       : out    vl_logic
    );
end exception_manager;
