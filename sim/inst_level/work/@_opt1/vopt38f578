library verilog;
use verilog.vl_types.all;
entity reservation_alu0_entry is
    port(
        iCLOCK          : in     vl_logic;
        inRESET         : in     vl_logic;
        iREMOVE_VALID   : in     vl_logic;
        iREGIST_VALID   : in     vl_logic;
        iREGIST_CMD     : in     vl_logic_vector(4 downto 0);
        iREGIST_CC      : in     vl_logic_vector(3 downto 0);
        iREGIST_FLAGS_VALID: in     vl_logic;
        iREGIST_FLAGS   : in     vl_logic_vector(4 downto 0);
        iREGIST_SOURCE1_VALID: in     vl_logic;
        iREGIST_SOURCE1 : in     vl_logic_vector(31 downto 0);
        iREGIST_PC      : in     vl_logic_vector(31 downto 0);
        iREGIST_DESTINATION_REGNAME: in     vl_logic_vector(5 downto 0);
        iREGIST_COMMIT_TAG: in     vl_logic_vector(5 downto 0);
        iREGIST_EX_REGIST_POINTER: in     vl_logic_vector(3 downto 0);
        iALU1_VALID     : in     vl_logic;
        iALU1_FLAGS_OPT_VALID: in     vl_logic;
        iALU1_FLAGS_REGNAME: in     vl_logic_vector(3 downto 0);
        iALU1_DESTINATION_REGNAME: in     vl_logic_vector(5 downto 0);
        iALU1_WRITEBACK : in     vl_logic;
        iALU1_DATA      : in     vl_logic_vector(31 downto 0);
        iALU1_FLAGS     : in     vl_logic_vector(4 downto 0);
        iALU2_VALID     : in     vl_logic;
        iALU2_FLAGS_OPT_VALID: in     vl_logic;
        iALU2_FLAGS_REGNAME: in     vl_logic_vector(3 downto 0);
        iALU2_DESTINATION_REGNAME: in     vl_logic_vector(5 downto 0);
        iALU2_WRITEBACK : in     vl_logic;
        iALU2_DATA      : in     vl_logic_vector(31 downto 0);
        iALU2_FLAGS     : in     vl_logic_vector(4 downto 0);
        iALU3_VALID     : in     vl_logic;
        iALU3_DESTINATION_REGNAME: in     vl_logic_vector(5 downto 0);
        iALU3_DATA      : in     vl_logic_vector(31 downto 0);
        iEX_EXECUTION_POINTER: in     vl_logic_vector(3 downto 0);
        iEXOUT_VALID    : in     vl_logic;
        oINFO_ENTRY_VALID: out    vl_logic;
        oINFO_MATCHING  : out    vl_logic;
        oINFO_CMD       : out    vl_logic_vector(4 downto 0);
        oINFO_CC        : out    vl_logic_vector(3 downto 0);
        oINFO_FLAG_VALID: out    vl_logic;
        oINFO_FLAG      : out    vl_logic_vector(4 downto 0);
        oINFO_SOURCE1_VALID: out    vl_logic;
        oINFO_SOURCE1   : out    vl_logic_vector(31 downto 0);
        oINFO_PC        : out    vl_logic_vector(31 downto 0);
        oINFO_DESTINATION_REGNAME: out    vl_logic_vector(5 downto 0);
        oINFO_COMMIT_TAG: out    vl_logic_vector(5 downto 0)
    );
end reservation_alu0_entry;
